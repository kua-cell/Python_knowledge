"""
演示正则表达式—元字符匹配
"""
import re

# 一、元字符匹配规则
# （1）单字符匹配：
# '.'-匹配任意一个字符（除了\n），‘\.’匹配点本身
# '[]'—匹配[]中例举的字符
# '\d'—匹配数字，即0—9
# '\D'—匹配非数字
# '\s'—匹配空白，即空格、tab键
# '\S'—匹配非空白
# '\w'—匹配单词字符， 即a-z、A-Z、0-9、_
# '\W'—匹配非单词字符

# 构建基础的字符串
# s = 'itcast itheima python 666 200507 jiang cheng yu'
#
# result = re.findall(r"\d", s)
# # 字符串前面加上‘r’的标记，
# # 表示字符串中转义字符无效，就是普通字符的意思
# result1 = re.findall(r"b-eF-Z3-9", s)
# print(result)
# print(result1)
# # 运行结果：
# # ['6', '6', '6', '2', '0', '0', '5', '0', '7']
#
#
# （2）数量匹配：
# ‘*’——匹配前一个规则的字符出现0至无数次
# ‘+’——匹配前一个规则的字符出现0至无数次
# ‘？’——匹配前一个规则的字符出现0次或1次
# ‘{m}’——匹配前一个规则的字符出现m次
# ‘{m,}’——匹配前一个规则的字符出现最少m次
# ‘{m,n}’——匹配前一个规则的字符出现m至n次         逗号后无空格
# 例如：\d?


# （3）边界匹配：
# ‘^’——匹配字符串开头
# ‘$’——匹配字符串结尾
# ‘\b’——匹配一个单词边界
# ‘\B’——匹配非单词边界

# （4）分组匹配：
# ‘|’——匹配左右任意一个表达式
# ‘()’——将括号中的字符作为一个分组


# 匹配账号，只能由字母和数字著称，长度限制6到10位
# r = '^[0-9a-zA-Z]{6,10}$'
# s = '12345627883asdA'
# print(re.findall(r, s))
# 匹配QQ号，要求纯数字，长度5—11，第一位不为0
# r = '^[1-9][0-9]{6,10}$'
# s = '12345627883'
# print(re.findall(r, s))
# 匹配邮箱地址，只允许qq、163、gmail这三种邮箱地址
# {内容}{内容}{内容}{内容}{内容}{内容}{内容}{内容}@{内容}{内容}{内容}
r = r'(^[\w-]+(\.[\w-]+)*@(qq|163|gmail)(\.[\w-]+)$)'
s = 'a.s.d.f.g.h.@qq.com.2.1.d.a'
print(re.match(r, s))

